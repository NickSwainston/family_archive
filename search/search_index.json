{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Swainston Family Archive's documentation! The following is a sections describe how to use, install and maintain the web application. Contents Home Installation (database) Installation (webapp) Running server","title":"Home"},{"location":"#swainston-family-archives-documentation","text":"The following is a sections describe how to use, install and maintain the web application.","title":"Swainston Family Archive's documentation!"},{"location":"#contents","text":"Home Installation (database) Installation (webapp) Running server","title":"Contents"},{"location":"database_installation/","text":"Database Installation Dependancies For Ubuntu or Debian Linux: .. code-block:: sudo apt-get update sudo apt-get install postgresql postgresql-contrib libpq-dev python3-dev graphviz python3-pip gosu postgresql-q3c locales Then install the python requirements (recommended in its own virtual environment) using: .. code-block:: cd family_archive poetry install You will also need to install django-q3c which is currently private so you will need to ask to get access from the Data Central team <https://datacentral.org.au/about/> _ (such as James Tocknell). Environment Variables To run the web application, you will need to set the following environment variables (conda can make these environment specific <https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#setting-environment-variables> _): .. csv-table:: Envionment Variables :header: \"Variable\",\"Description\" \"DB_USER\",\"Postgres user name which you will set in the next section.\" \"DB_PASSWORD\",\"Postgres password which you will set in the next section.\" \"DB_SECRET_KEY\", \"Django secret key. Here <https://saasitive.com/tutorial/generate-django-secret-key/> _ is a description of how to generate one.\" Start the Postgres Database The following commands will set up the Postgres database for the web app. Replace $DB_USER and $DB_PASSWORD with the environment variable values. .. code-block:: sudo -u postgres psql CREATE DATABASE mwa_image_plane_db; CREATE USER $DB_USER WITH ENCRYPTED PASSWORD '$DB_PASSWORD'; ALTER ROLE $DB_USER SET client_encoding TO 'utf8'; ALTER ROLE $DB_USER SET default_transaction_isolation TO 'read committed'; ALTER ROLE $DB_USER SET timezone TO 'UTC'; .. _create_database: Setup database for the first time Run the following commands from the gleam_webapp subdirectory so Django can setup up the database structure and upload defaults .. code-block:: python manage.py makemigrations candidate_app python manage.py migrate candidate_app python manage.py migrate python manage.py migrate --run-syncdb Create a superuser These commands will set up a superuser account. .. code-block:: python manage.py createsuperuser Set up Q3C Q3C <https://github.com/segasai/q3c> _ allows spatial indexing on a sphere so that you can do quick cone searchs to find nearby sources/candidates within your database. The followinng commands will set it up: .. code-block:: sudo -u postgres psql \\c mwa_image_plane_db CREATE EXTENSION q3c; CREATE INDEX ON candidate_app_candidate (q3c_ang2ipix(ra_deg, dec_deg)); Delete Postgres Database Only do this is you want to restart the database! To delete the database use the following commands .. code-block:: sudo -u postgres psql DROP DATABASE mwa_image_plane_db; CREATE DATABASE mwa_image_plane_db; You will then have to recreate the database using the commands in :ref: create_database","title":"Installation (database)"},{"location":"database_installation/#database-installation","text":"","title":"Database Installation"},{"location":"database_installation/#dependancies","text":"For Ubuntu or Debian Linux: .. code-block:: sudo apt-get update sudo apt-get install postgresql postgresql-contrib libpq-dev python3-dev graphviz python3-pip gosu postgresql-q3c locales Then install the python requirements (recommended in its own virtual environment) using: .. code-block:: cd family_archive poetry install You will also need to install django-q3c which is currently private so you will need to ask to get access from the Data Central team <https://datacentral.org.au/about/> _ (such as James Tocknell).","title":"Dependancies"},{"location":"database_installation/#environment-variables","text":"To run the web application, you will need to set the following environment variables (conda can make these environment specific <https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#setting-environment-variables> _): .. csv-table:: Envionment Variables :header: \"Variable\",\"Description\" \"DB_USER\",\"Postgres user name which you will set in the next section.\" \"DB_PASSWORD\",\"Postgres password which you will set in the next section.\" \"DB_SECRET_KEY\", \"Django secret key. Here <https://saasitive.com/tutorial/generate-django-secret-key/> _ is a description of how to generate one.\"","title":"Environment Variables"},{"location":"database_installation/#start-the-postgres-database","text":"The following commands will set up the Postgres database for the web app. Replace $DB_USER and $DB_PASSWORD with the environment variable values. .. code-block:: sudo -u postgres psql CREATE DATABASE mwa_image_plane_db; CREATE USER $DB_USER WITH ENCRYPTED PASSWORD '$DB_PASSWORD'; ALTER ROLE $DB_USER SET client_encoding TO 'utf8'; ALTER ROLE $DB_USER SET default_transaction_isolation TO 'read committed'; ALTER ROLE $DB_USER SET timezone TO 'UTC'; .. _create_database:","title":"Start the Postgres Database"},{"location":"database_installation/#setup-database-for-the-first-time","text":"Run the following commands from the gleam_webapp subdirectory so Django can setup up the database structure and upload defaults .. code-block:: python manage.py makemigrations candidate_app python manage.py migrate candidate_app python manage.py migrate python manage.py migrate --run-syncdb","title":"Setup database for the first time"},{"location":"database_installation/#create-a-superuser","text":"These commands will set up a superuser account. .. code-block:: python manage.py createsuperuser","title":"Create a superuser"},{"location":"database_installation/#set-up-q3c","text":"Q3C <https://github.com/segasai/q3c> _ allows spatial indexing on a sphere so that you can do quick cone searchs to find nearby sources/candidates within your database. The followinng commands will set it up: .. code-block:: sudo -u postgres psql \\c mwa_image_plane_db CREATE EXTENSION q3c; CREATE INDEX ON candidate_app_candidate (q3c_ang2ipix(ra_deg, dec_deg));","title":"Set up Q3C"},{"location":"database_installation/#delete-postgres-database","text":"Only do this is you want to restart the database! To delete the database use the following commands .. code-block:: sudo -u postgres psql DROP DATABASE mwa_image_plane_db; CREATE DATABASE mwa_image_plane_db; You will then have to recreate the database using the commands in :ref: create_database","title":"Delete Postgres Database"},{"location":"running_server/","text":"Running Server Checking for errors and inspecting logs nginx errors are in .. code-block:: tail -f cat /var/log/nginx/error.log All commands assume you're in the gleam_webapp sub directory. You can see the output of the server with .. code-block:: tail -f uwsgi-emperor.log .. _start_server: Starting the server Start the uwsgi server with .. code-block:: uwsgi --ini gleam_webapp_uwsgi.ini This will run in the background and the following sections describe how to restarting and stopping the server. Restarting the server .. code-block:: kill -HUP cat /tmp/project-master.pid Stopping the server .. code-block:: uwsgi --stop /tmp/project-master.pid Installing updates If the updates are small normally something as simple as the following will suffice: .. code-block:: git pull kill -HUP cat /tmp/project-master.pid Larger updates may need a combination of the following commands .. code-block:: git pull # Stop server uwsgi --stop /tmp/project-master.pid # Check for new dependent software pip install -r requirements.txt # Check for new static files python manage.py collectstatic # Make any required changes to the backend database python manage.py makemigrations python manage.py migrate # Start server uwsgi --ini gleam_webapp_uwsgi.ini","title":"Running server"},{"location":"running_server/#running-server","text":"","title":"Running Server"},{"location":"running_server/#checking-for-errors-and-inspecting-logs","text":"nginx errors are in .. code-block:: tail -f cat /var/log/nginx/error.log All commands assume you're in the gleam_webapp sub directory. You can see the output of the server with .. code-block:: tail -f uwsgi-emperor.log .. _start_server:","title":"Checking for errors and inspecting logs"},{"location":"running_server/#starting-the-server","text":"Start the uwsgi server with .. code-block:: uwsgi --ini gleam_webapp_uwsgi.ini This will run in the background and the following sections describe how to restarting and stopping the server.","title":"Starting the server"},{"location":"running_server/#restarting-the-server","text":".. code-block:: kill -HUP cat /tmp/project-master.pid","title":"Restarting the server"},{"location":"running_server/#stopping-the-server","text":".. code-block:: uwsgi --stop /tmp/project-master.pid","title":"Stopping the server"},{"location":"running_server/#installing-updates","text":"If the updates are small normally something as simple as the following will suffice: .. code-block:: git pull kill -HUP cat /tmp/project-master.pid Larger updates may need a combination of the following commands .. code-block:: git pull # Stop server uwsgi --stop /tmp/project-master.pid # Check for new dependent software pip install -r requirements.txt # Check for new static files python manage.py collectstatic # Make any required changes to the backend database python manage.py makemigrations python manage.py migrate # Start server uwsgi --ini gleam_webapp_uwsgi.ini","title":"Installing updates"},{"location":"webapp_installation/","text":"Web Application Installation The following are instructions on how to setup up your nimbus instance for the first time. If you have already done this you can skip to :ref: start_server . Opening the Nimbus Instance Firewall Once you've set up the instance you need to open the firewall https://support.pawsey.org.au/documentation/display/US/Allow+HTTPS+Access+To+Your+Instance Then make a costum tcp rule for ports 80 and 443, should look like this .. image:: figures/nimbus_example.png :width: 800 Then follow this guide to check things step by step https://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html The following is examples of how I got it to work. Goal 1: IP as URL First try and get it to work with the nimbus IP as the URL. From directory containing manage.py run the command: .. code-block:: uwsgi --socket gleam_webapp.sock --module gleam_webapp.wsgi --chmod-socket=666 and nginx should look like this .. code-block:: upstream django { server unix:///home/ubuntu/GleamXGPMonitoring/gleam_webapp/gleam_webapp.sock; } server { listen 80; server_name 146.118.70.58; charset utf-8; client_max_body_size 75M; location /static { alias /home/ubuntu/GleamXGPMonitoring/gleam_webapp/static; } location / { uwsgi_pass django; include /home/ubuntu/GleamXGPMonitoring/gleam_webapp/uwsgi_params; } } and make sure the IP is in allowed hosts in settings.py: .. code-block:: ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '146.118.70.58'] Check if the works by using the IP as a URL in your browser. Static files errors If it's not finding the static files then setup the setting.py like this .. code-block:: STATIC_URL = '/static/' STATICFILES_DIRS = ( os.path.join(BASE_DIR, \"static/\"), ) STATIC_ROOT = os.path.join(BASE_DIR, \"static_host/\") then run .. code-block:: python manage.py collectstatic and update the nginx to .. code-block:: location /static { alias /home/ubuntu/GleamXGPMonitoring/gleam_webapp/static_host; } Try a simple domain Grab a free subdomain from https://www.duckdns.org/domains that points to your ip then update the url in nginx's severname, and ALLOWED_HOSTS in settings.py Getting a ssl certificate Here are instructions on generating a ssl certificate https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal","title":"Installation (webapp)"},{"location":"webapp_installation/#web-application-installation","text":"The following are instructions on how to setup up your nimbus instance for the first time. If you have already done this you can skip to :ref: start_server .","title":"Web Application Installation"},{"location":"webapp_installation/#opening-the-nimbus-instance-firewall","text":"Once you've set up the instance you need to open the firewall https://support.pawsey.org.au/documentation/display/US/Allow+HTTPS+Access+To+Your+Instance Then make a costum tcp rule for ports 80 and 443, should look like this .. image:: figures/nimbus_example.png :width: 800 Then follow this guide to check things step by step https://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html The following is examples of how I got it to work.","title":"Opening the Nimbus Instance Firewall"},{"location":"webapp_installation/#goal-1-ip-as-url","text":"First try and get it to work with the nimbus IP as the URL. From directory containing manage.py run the command: .. code-block:: uwsgi --socket gleam_webapp.sock --module gleam_webapp.wsgi --chmod-socket=666 and nginx should look like this .. code-block:: upstream django { server unix:///home/ubuntu/GleamXGPMonitoring/gleam_webapp/gleam_webapp.sock; } server { listen 80; server_name 146.118.70.58; charset utf-8; client_max_body_size 75M; location /static { alias /home/ubuntu/GleamXGPMonitoring/gleam_webapp/static; } location / { uwsgi_pass django; include /home/ubuntu/GleamXGPMonitoring/gleam_webapp/uwsgi_params; } } and make sure the IP is in allowed hosts in settings.py: .. code-block:: ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '146.118.70.58'] Check if the works by using the IP as a URL in your browser.","title":"Goal 1: IP as URL"},{"location":"webapp_installation/#static-files-errors","text":"If it's not finding the static files then setup the setting.py like this .. code-block:: STATIC_URL = '/static/' STATICFILES_DIRS = ( os.path.join(BASE_DIR, \"static/\"), ) STATIC_ROOT = os.path.join(BASE_DIR, \"static_host/\") then run .. code-block:: python manage.py collectstatic and update the nginx to .. code-block:: location /static { alias /home/ubuntu/GleamXGPMonitoring/gleam_webapp/static_host; }","title":"Static files errors"},{"location":"webapp_installation/#try-a-simple-domain","text":"Grab a free subdomain from https://www.duckdns.org/domains that points to your ip then update the url in nginx's severname, and ALLOWED_HOSTS in settings.py","title":"Try a simple domain"},{"location":"webapp_installation/#getting-a-ssl-certificate","text":"Here are instructions on generating a ssl certificate https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal","title":"Getting a ssl certificate"}]}