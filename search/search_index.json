{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Swainston Family Archive's documentation! The following is a sections describe how to use, install and maintain the web application. Contents Home Installation (database) Installation (webapp) Running server","title":"Home"},{"location":"#swainston-family-archives-documentation","text":"The following is a sections describe how to use, install and maintain the web application.","title":"Swainston Family Archive's documentation!"},{"location":"#contents","text":"Home Installation (database) Installation (webapp) Running server","title":"Contents"},{"location":"database_installation/","text":"Database Installation Dependancies For Ubuntu or Debian Linux: sudo apt-get update sudo apt-get install postgresql postgresql-contrib libpq-dev python3-dev graphviz python3-pip gosu postgresql-q3c locales Then install the python requirements (recommended in its own virtual environment) using: cd family_archive poetry install Webapp settings Use python-decouple to put the webapp settings and secrets into a file in family_archive/.env : SECRET_KEY=[django-secret](https://miniwebtool.com/django-secret-key-generator/) DEBUG=True DB_NAME=family_archive DB_USER=dbuser DB_PASSWORD=dbpassword ALLOWED_HOSTS=127.0.0.1 DB_HOST=localhost Start the Postgres Database The following commands will set up the Postgres database for the web app. Replace $DB_USER and $DB_PASSWORD with the environment variable values. sudo -u postgres psql CREATE DATABASE $DB_NAME; CREATE USER $DB_USER WITH ENCRYPTED PASSWORD '$DB_PASSWORD'; ALTER ROLE $DB_USER SET client_encoding TO 'utf8'; ALTER ROLE $DB_USER SET default_transaction_isolation TO 'read committed'; ALTER ROLE $DB_USER SET timezone TO 'UTC'; Setup database for the first time Run the following commands from the gleam_webapp subdirectory so Django can setup up the database structure and upload defaults python manage.py makemigrations archive_app python manage.py migrate archive_app python manage.py migrate python manage.py migrate --run-syncdb Create a superuser These commands will set up a superuser account. python manage.py createsuperuser Delete Postgres Database Only do this is you want to restart the database! To delete the database use the following commands sudo -u postgres psql DROP DATABASE $DB_NAME; CREATE DATABASE $DB_NAME; You will then have to recreate the database using the commands in Setup database for the first time","title":"Installation (database)"},{"location":"database_installation/#database-installation","text":"","title":"Database Installation"},{"location":"database_installation/#dependancies","text":"For Ubuntu or Debian Linux: sudo apt-get update sudo apt-get install postgresql postgresql-contrib libpq-dev python3-dev graphviz python3-pip gosu postgresql-q3c locales Then install the python requirements (recommended in its own virtual environment) using: cd family_archive poetry install","title":"Dependancies"},{"location":"database_installation/#webapp-settings","text":"Use python-decouple to put the webapp settings and secrets into a file in family_archive/.env : SECRET_KEY=[django-secret](https://miniwebtool.com/django-secret-key-generator/) DEBUG=True DB_NAME=family_archive DB_USER=dbuser DB_PASSWORD=dbpassword ALLOWED_HOSTS=127.0.0.1 DB_HOST=localhost","title":"Webapp settings"},{"location":"database_installation/#start-the-postgres-database","text":"The following commands will set up the Postgres database for the web app. Replace $DB_USER and $DB_PASSWORD with the environment variable values. sudo -u postgres psql CREATE DATABASE $DB_NAME; CREATE USER $DB_USER WITH ENCRYPTED PASSWORD '$DB_PASSWORD'; ALTER ROLE $DB_USER SET client_encoding TO 'utf8'; ALTER ROLE $DB_USER SET default_transaction_isolation TO 'read committed'; ALTER ROLE $DB_USER SET timezone TO 'UTC';","title":"Start the Postgres Database"},{"location":"database_installation/#setup-database-for-the-first-time","text":"Run the following commands from the gleam_webapp subdirectory so Django can setup up the database structure and upload defaults python manage.py makemigrations archive_app python manage.py migrate archive_app python manage.py migrate python manage.py migrate --run-syncdb","title":"Setup database for the first time"},{"location":"database_installation/#create-a-superuser","text":"These commands will set up a superuser account. python manage.py createsuperuser","title":"Create a superuser"},{"location":"database_installation/#delete-postgres-database","text":"Only do this is you want to restart the database! To delete the database use the following commands sudo -u postgres psql DROP DATABASE $DB_NAME; CREATE DATABASE $DB_NAME; You will then have to recreate the database using the commands in Setup database for the first time","title":"Delete Postgres Database"},{"location":"running_server/","text":"Running Server Checking for errors and inspecting logs nginx errors are in tail -f cat /var/log/nginx/error.log All commands assume you're in the gleam_webapp sub directory. You can see the output of the server with tail -f uwsgi-emperor.log Starting the server Start the uwsgi server with uwsgi --ini gleam_webapp_uwsgi.ini This will run in the background and the following sections describe how to restarting and stopping the server. Restarting the server kill -HUP `cat /tmp/project-master.pid` Stopping the server uwsgi --stop /tmp/project-master.pid Installing updates If the updates are small normally something as simple as the following will suffice: git pull kill -HUP `cat /tmp/project-master.pid` Larger updates may need a combination of the following commands git pull # Stop server uwsgi --stop /tmp/project-master.pid # Check for new dependent software pip install -r requirements.txt # Check for new static files python manage.py collectstatic # Make any required changes to the backend database python manage.py makemigrations python manage.py migrate # Start server uwsgi --ini gleam_webapp_uwsgi.ini","title":"Running server"},{"location":"running_server/#running-server","text":"","title":"Running Server"},{"location":"running_server/#checking-for-errors-and-inspecting-logs","text":"nginx errors are in tail -f cat /var/log/nginx/error.log All commands assume you're in the gleam_webapp sub directory. You can see the output of the server with tail -f uwsgi-emperor.log","title":"Checking for errors and inspecting logs"},{"location":"running_server/#starting-the-server","text":"Start the uwsgi server with uwsgi --ini gleam_webapp_uwsgi.ini This will run in the background and the following sections describe how to restarting and stopping the server.","title":"Starting the server"},{"location":"running_server/#restarting-the-server","text":"kill -HUP `cat /tmp/project-master.pid`","title":"Restarting the server"},{"location":"running_server/#stopping-the-server","text":"uwsgi --stop /tmp/project-master.pid","title":"Stopping the server"},{"location":"running_server/#installing-updates","text":"If the updates are small normally something as simple as the following will suffice: git pull kill -HUP `cat /tmp/project-master.pid` Larger updates may need a combination of the following commands git pull # Stop server uwsgi --stop /tmp/project-master.pid # Check for new dependent software pip install -r requirements.txt # Check for new static files python manage.py collectstatic # Make any required changes to the backend database python manage.py makemigrations python manage.py migrate # Start server uwsgi --ini gleam_webapp_uwsgi.ini","title":"Installing updates"},{"location":"webapp_installation/","text":"Web Application Installation The following are instructions on how to setup up your nimbus instance for the first time. If you have already done this you can skip to :ref: start_server . Opening the Nimbus Instance Firewall Once you've set up the instance you need to open the firewall. Then make a costum tcp rule for ports 80 and 443, should look like this Then follow this guide to check things step by step https://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html The following is examples of how I got it to work. Goal 1: IP as URL First try and get it to work with the nimbus IP as the URL. From directory containing manage.py run the command: uwsgi --socket gleam_webapp.sock --module gleam_webapp.wsgi --chmod-socket=666 and nginx should look like this upstream django { server unix:///home/ubuntu/GleamXGPMonitoring/gleam_webapp/gleam_webapp.sock; } server { listen 80; server_name 146.118.70.58; charset utf-8; client_max_body_size 75M; location /static { alias /home/ubuntu/GleamXGPMonitoring/gleam_webapp/static; } location / { uwsgi_pass django; include /home/ubuntu/GleamXGPMonitoring/gleam_webapp/uwsgi_params; } } and make sure the IP is in allowed hosts in settings.py: ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '146.118.70.58'] Check if the works by using the IP as a URL in your browser. Static files errors If it's not finding the static files then setup the setting.py like this STATIC_URL = '/static/' STATICFILES_DIRS = ( os.path.join(BASE_DIR, \"static/\"), ) STATIC_ROOT = os.path.join(BASE_DIR, \"static_host/\") then run python manage.py collectstatic and update the nginx to location /static { alias /home/ubuntu/GleamXGPMonitoring/gleam_webapp/static_host; } Try a simple domain Grab a free subdomain from https://www.duckdns.org/domains that points to your ip then update the url in nginx's severname, and ALLOWED_HOSTS in settings.py Getting a ssl certificate Here are instructions on generating a ssl certificate https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal","title":"Installation (webapp)"},{"location":"webapp_installation/#web-application-installation","text":"The following are instructions on how to setup up your nimbus instance for the first time. If you have already done this you can skip to :ref: start_server .","title":"Web Application Installation"},{"location":"webapp_installation/#opening-the-nimbus-instance-firewall","text":"Once you've set up the instance you need to open the firewall. Then make a costum tcp rule for ports 80 and 443, should look like this Then follow this guide to check things step by step https://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html The following is examples of how I got it to work.","title":"Opening the Nimbus Instance Firewall"},{"location":"webapp_installation/#goal-1-ip-as-url","text":"First try and get it to work with the nimbus IP as the URL. From directory containing manage.py run the command: uwsgi --socket gleam_webapp.sock --module gleam_webapp.wsgi --chmod-socket=666 and nginx should look like this upstream django { server unix:///home/ubuntu/GleamXGPMonitoring/gleam_webapp/gleam_webapp.sock; } server { listen 80; server_name 146.118.70.58; charset utf-8; client_max_body_size 75M; location /static { alias /home/ubuntu/GleamXGPMonitoring/gleam_webapp/static; } location / { uwsgi_pass django; include /home/ubuntu/GleamXGPMonitoring/gleam_webapp/uwsgi_params; } } and make sure the IP is in allowed hosts in settings.py: ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '146.118.70.58'] Check if the works by using the IP as a URL in your browser.","title":"Goal 1: IP as URL"},{"location":"webapp_installation/#static-files-errors","text":"If it's not finding the static files then setup the setting.py like this STATIC_URL = '/static/' STATICFILES_DIRS = ( os.path.join(BASE_DIR, \"static/\"), ) STATIC_ROOT = os.path.join(BASE_DIR, \"static_host/\") then run python manage.py collectstatic and update the nginx to location /static { alias /home/ubuntu/GleamXGPMonitoring/gleam_webapp/static_host; }","title":"Static files errors"},{"location":"webapp_installation/#try-a-simple-domain","text":"Grab a free subdomain from https://www.duckdns.org/domains that points to your ip then update the url in nginx's severname, and ALLOWED_HOSTS in settings.py","title":"Try a simple domain"},{"location":"webapp_installation/#getting-a-ssl-certificate","text":"Here are instructions on generating a ssl certificate https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal","title":"Getting a ssl certificate"}]}